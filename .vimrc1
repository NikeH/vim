"Lets not try to be VI compatible
set nocompatible

"
set guifont=Hack
"Lets have nicer tabs and auto indentation
set shiftwidth=2
set tabstop=2
set autoindent
set expandtab

"Default leader key is `\` which is silly changing it to space makes your life
"so much neater
let mapleader = "\<Space>"

imap jj <Esc>
"Backspace
set backspace=2

"Nicer line breaks
set linebreak

"ig
set wildignore=*.class

"Lets use relative line numbers instead, since it's VIM.
set number

"Use automatic indent
set autoindent

"Lets enable syntax highlighting cause that is also dope
syntax on

" activates filetype detection
filetype plugin indent on

"Allow hidden buffers.
set hidden

"Stuff
set ruler
set showmode
set showcmd

"splitting
set splitright

"Allow mouse scrolling
set mouse=a


" Tell Vim which characters to show for expanded TABs,
" trailing whitespace, and end-of-lines. VERY useful!
if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif
set list                " Show problematic characters.

" Also highlight all tabs and trailing whitespace characters.
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
match ExtraWhitespace /\s\+$\|\t/

"colors
set t_Co=256
call plug#begin()
Plug 'scrooloose/nerdtree'

Plug 'KeitaNakamura/neodark.vim'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'SirVer/ultisnips'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

" (Optional) Multi-entry selection UI.
Plug 'junegunn/fzf'


call plug#end()

let g:LanguageClient_serverCommands = {
    \ 'c': ['ccls', '--log-file=/tmp/cc.log'],
    \}
"
"      \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
"    \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
"    \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
"    \ 'python': ['/usr/local/bin/pyls'],
"    \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],
"    \ }
set completefunc=LanguageClient#complete
set formatexpr=LanguageClient_textDocument_rangeFormatting()

nn <silent> gd :call LanguageClient#textDocument_definition()<cr>
nn <silent> gK :call LanguageClient#textDocument_references({'includeDeclaration': v:false})<cr>
nn <silent> K :call LanguageClient#textDocument_hover()<cr>
nn <f2> :call LanguageClient_textDocument_rename()<cr>
" nn <leader>ji :Denite documentSymbol<cr>
" nn <leader>jI :Denite workspaceSymbol<cr>

" nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" Or map each action separately
" nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
" nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>

colorscheme neodark


let g:neodark#background='gray'
let g:cpp_class_scope_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_no_function_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1

